# -*- coding: utf-8 -*-
"""llama2_Question_Answering_speech_to_speech.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iaQp0PCiH-8ox8DSC_c-39AxsEByEgEZ
"""



import torch

if torch.cuda.is_available():
    device = torch.device("cuda")
    # Your code utilizing GPU
else:
    device = torch.device("cpu")
    # Your code running on CPU

from torch import cuda, bfloat16
import transformers

model_id = 'meta-llama/Llama-2-7b-chat-hf'

device = torch.device('cuda') if torch.cuda.is_available() else "cpu"

# set quantization configuration to load large model with less GPU memory
# this requires the `bitsandbytes` library
bnb_config = transformers.BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type='nf4',
    bnb_4bit_use_double_quant=True,
    bnb_4bit_compute_dtype=bfloat16
)

# begin initializing HF items, you need an access token
hf_auth = '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'
model_config = transformers.AutoConfig.from_pretrained(
    model_id,
    use_auth_token=hf_auth
)

model = transformers.AutoModelForCausalLM.from_pretrained(
    model_id,
    trust_remote_code=True,
    config=model_config,
    quantization_config=bnb_config,
    device_map='auto',
    use_auth_token=hf_auth
)
model.to(device)
# enable evaluation mode to allow model inference
model.eval()

print(f"Model loaded on {device}")

tokenizer = transformers.AutoTokenizer.from_pretrained(
    model_id,
    use_auth_token=hf_auth
)

"""# we need to define the stopping criteria of the model. The stopping criteria allows us to specify when the model should stop generating text."""

# stop_list = ['\nHuman:', '\n```\n']

# stop_token_ids = [tokenizer(x)['input_ids'] for x in stop_list]
# stop_token_ids

from transformers import StoppingCriteria, StoppingCriteriaList
import torch
# # define custom stopping criteria object
# class StopOnTokens(StoppingCriteria):
#     def __call__(self, input_ids: torch.LongTensor, scores: torch.FloatTensor, **kwargs) -> bool:
#         for stop_ids in stop_token_ids:
#             if torch.eq(input_ids[0][-len(stop_ids):], stop_ids).all():
#                 return True
#         return False

# stopping_criteria = StoppingCriteriaList([StopOnTokens()])

generate_text = transformers.pipeline(
    model=model,
    tokenizer=tokenizer,
    return_full_text=True,  # langchain expects the full text
    task='text-generation',
    # we pass model parameters here too
    # stopping_criteria=stopping_criteria,  # without this model rambles during chat
    temperature=0.1,  # 'randomness' of outputs, 0.0 is the min and 1.0 the max
    max_new_tokens=512,  # max number of tokens to generate in the output
    repetition_penalty=1.1  # without this output begins repeating
)

res = generate_text("Explain me the difference between Data Lakehouse and Data Warehouse.")
res

from langchain.llms import HuggingFacePipeline

llm = HuggingFacePipeline(pipeline=generate_text)

# # checking again that everything is working fine
# llm(prompt="Explain me the difference between Data Lakehouse and Data Warehouse.")

# from langchain.document_loaders import WebBaseLoader

# web_link="https://www.railyatri.in/time-table/12864-yesvantpur-howrah-sf-express"
# loader = WebBaseLoader(web_link)
# documents = loader.load()

from langchain.document_loaders import PyPDFLoader

loader = PyPDFLoader("/content/abcd.pdf")
# pages = loader.load_and_split()
documents=loader.load()


from langchain.text_splitter import RecursiveCharacterTextSplitter

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=30)
all_splits = text_splitter.split_documents(documents)

from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS

model_name = "sentence-transformers/all-mpnet-base-v2"
model_kwargs = {"device": "cuda"}

embeddings = HuggingFaceEmbeddings(model_name=model_name, model_kwargs=model_kwargs)

# storing embeddings in the vector store
vectorstore = FAISS.from_documents(all_splits, embeddings)

from langchain.chains import ConversationalRetrievalChain

chain = ConversationalRetrievalChain.from_llm(llm, vectorstore.as_retriever(), return_source_documents=True)

chat_history = []

# query = "What is Data lakehouse architecture in Databricks?"
query="what is RAC?"
result = chain({"question": query, "chat_history": chat_history})

print(result['answer'])

chat_history = []

# query = "What is Data lakehouse architecture in Databricks?"
query="tell me about shramjivi express?"
result = chain({"question": query, "chat_history": chat_history})

print(result['answer'])

chat_history = [(query, result["answer"])]

query = "What are Data Governance and Interoperability in it?"
result = chain({"question": query, "chat_history": chat_history})

print(result['answer'])

